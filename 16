#!/bin/bash

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_TO_RUN="$SCRIPT_DIR/script2.sh"

# List of commands to monitor
COMMANDS_TO_MONITOR=("script2.sh" "another_script.sh")

# Maximum number of allowed concurrent executions
MAX_CONCURRENT=3

# Lock file location
LOCK_FILE="/tmp/script_execution.lock"

# Function to count running instances of the monitored commands
count_running_instances() {
    local total_count=0
    for cmd in "${COMMANDS_TO_MONITOR[@]}"; do
        count=$(ps -ef | grep "$cmd" | grep -v grep | wc -l)
        total_count=$((total_count + count))
    done
    echo "$total_count"
}

# Acquire lock
acquire_lock() {
    exec 200>"$LOCK_FILE"
    flock -n 200 || { echo "Another instance is managing the lock. Waiting..."; flock 200; }
}

# Release lock
release_lock() {
    flock -u 200
    rm -f "$LOCK_FILE"
}

# Main logic
acquire_lock
while true; do
    running=$(count_running_instances)
    if [ "$running" -lt "$MAX_CONCURRENT" ]; then
        break
    fi
    echo "Too many concurrent executions ($running). Waiting..."
    sleep 1
done
release_lock

# Run the underlying script as a separate process and capture its PID
nohup "$SCRIPT_TO_RUN" "$@" > /dev/null 2>&1 &
UNDERLYING_PID=$!

# Wait for the underlying script to complete
wait "$UNDERLYING_PID"

echo "Underlying script completed with PID: $UNDERLYING_PID"